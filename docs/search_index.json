[["index.html", "Tercen Book Preface Why read this book? Structure of the book Acknowledgement Typography conventions Feedback", " Tercen Book Tercen support document Preface This is a book about the Tercen platform and covers the motivation, design ideas, features, deployment, server administration aspects and roadmap. It is currently a draft and aims to eventually be the definitive guide to Tercen. It is incrementally written and changes often as we are constantly adding to the Tercen project. Why read this book? It is the centralized knowledge of Tercen in a book format. It is intended to be detailed and is aimed for researchers who require an understanding of Tercen. If you require a quick intro to Tercen then we suggest the starters guide. Structure of the book The book has a chapter for each of the tools main features. The final chapters contain additional practical information (e.g. server configuration, roadmaps). Acknowledgement We would like to thank all the users for their feedback about Tercen. It really helped us improve Tercen. Typography conventions Important terms and concepts are in bold (e.g. workflow, step, biologist). Any element related to a user interface element is in a code typography (e.g. factor label, ok button). Feedback If you wish to give feedback then please do not hesitate to create an entry in the issue tracker. The book is in a public github repository tercen book, therefore feel free to interact with the repository by cloning, modifying, pushing content. "],["about-the-authors.html", "About the authors", " About the authors This is tercen support document and many authors contributed to this book. We would like to thank them all. "],["introduction.html", "Chapter 1 Introduction Motivation Challenges Way forward", " Chapter 1 Introduction Motivation Tercen promotes collaboration for data analysis. Not everyone can code or even wants to, but everyone should benefit from the explosion of data and code currently taking place. Tercen allows non programmers (e.g. biologists) to explore their data and allows programmers (e.g. bioinformaticians) to upload their code (or web-apps) for the biologist to use. By offering this services we believe biologist get empowered and can claim back control of their data. The bioinformatician gets liberated from the operational details and day to day analysis demands from the biologist. This is summed up with the phrase: Tercen empowers the biologist and liberates the bioinformatician. Challenges There are challenges for both the biologist and bioinformatician. Biologists challenges: Get control of data Handle large data sizes Reduce analysis time Integrate external databases Visual Interaction Bioinformaticians challenges: Validate methodologies Improve analysis quality Educate biologists on statistical techniques Reduce time spent on IT support Way forward A new generation of tools and approaches are necessary. Tercen aims to be such an approach. Tercen is a platform where biologist and bioinformatician work easily together and upload, store and compute data. A more harmonious state between the programmers and non-programmers is achieved using Tercen. The main features of Tercen are: Generate any visual Visual computation Workflow analysis and customization Integrate external knowledge Sharing analysis Sharing data Results reporting Project centric analysis Data provenance Add operators or apps (i.e. plug-ins) Programmatic access (Tercen API) Cloud hosted or on-site Zero install For a deeper understanding about Tercen read the next chapter and consult the specific chapter on a particular feature. There are also online videos, found in the Tercen youtube channel There are also some extra online material found in the learn section of our website. "],["tercen-features.html", "Chapter 2 Tercen features", " Chapter 2 Tercen features Here is an overview of Tercen features. Each feature has its own chapter. Generate any visual A researcher configures any graphical view (e.g. heatmaps, plots, time series, kinetic time series and parallel co-ordinates, pairwise scatter plots). Refer to chapter 4. Visual computation A researcher defines a computation (e.g. mean, ANOVA, Mixed-Model, count) visually and in so doing defines a new computation. Process any large numeric data: Researcher can upload and process any type of large numerical data (e.g. genomic, flow cytometry, proteomic). Refer to chapter 5. Workflow analysis and customization A researcher visually customizes a workflow. A workflow is a pipeline data analysis composed of a sequence of computation and annotation steps. There are standard workflows for each of molecular readouts (e.g. RNAseq, flowCyto, mass-spectroscopy spectra). Refer to chapter 6. Integrate external knowledge A researcher integrates extra data from external data or knowledge sources (e.g. biological database). Refer to chapter 7. Sharing analysis A researcher shares the workflow and data via an URL and both researcher and bioinformatician can collaborate on the same workflow and data at the same time. Refer to chapter 8. Sharing data A researcher shares the measurement and computed data via URL to other parties. Raw measurement data or newly analysed data is shareable to any users with internet. Refer to chapter 9. Results reporting A researcher generates an extensive report on the complete workflow for collaborators, presentations or publication. The report contains not only the conclusions but an automatically generated formal description of the complete process (e.g. normalization, statistics testing, clustering, functional annotation). This is essential for reproducible science. Refer to chapter 10. Project centric analysis Science is project orientated and a researcher centralizes all the data, workflow and visuals in one project and easily sets access control. Refer to chapter 11. Data provenance A researcher traces any computed value back to the initial measurement. Refer to chapter 14. Add operators or apps (i.e. plug-ins) A researcher easily adds powerful computation or visualization plug-ins. These plugins are developed by the bioinformatician and transmitted via the Tercen platform. Plug-ins are computation or visualization modules (e.g. vsn normalization, ANOVA, PCA, MDS, Mixed Models, and clustering). Refer to chapter 15. Programmatic access Bioinformaticians accesses and manipulates the analysis and components through their favorite programming environment (e.g. R, RShiny, Python, Matlab and Javascript). Refer to chapter 17. Cloud hosted or on-site A researcher shares the complete process via a secure internet connection to secure cloud service, all computation resources (CPU, RAM and hard disk) are dynamically allocated to the researcher. Tercen is also available for onsite deployment. Refer to chapter 18 and chapter 19. Zero install A researcher immediately starts performing analysis using a browser on any device without the aid of an IT administration. Refer to chapter 18. "],["concepts.html", "Chapter 3 Concepts What is a measurement, variable and observation? What is a step, app and workflow? What is visual computation? What is an universal table and relational algebra?", " Chapter 3 Concepts Spending some time on the important concepts helps in the understanding the logic behind Tercen. The following questions highlight some core concepts. What is a measurement, variable and observation? What is a measurement, variable and observation? This question seems so obvious but it helps to understand how Tercen structures data. Tercen is measurement orientated. For example, think of a laboratory instrument generating measurements, say a protein or gene measurement value mt, and each measurement is taken with an annotation context, i.e. the sample name (sn), the temperature(tm), the time(ti), the Ph (Ph) etc. So each mt (i.e. a measurement) value is annotated with many other values sn, tm, ti, Ph. Describing mt can be done by using a data table using a long format such as: mt sn tm ti Ph 200.3 sample1 37 60 7.7 413.1 sample2 37 70 8.0 273.0 sample3 37 80 7.0 Each row represents a individual measurement with all its corresponding annotation values. The number of observations are the number of rows. The number of columns is the number of variables. This format may seem verbose but it is measurement orientated and comes with the complete annotation of each measurement (i.e. rows). Internally Tercen uses such a row like structure. Each measurement is recorded with a full experimental context of annotation values. In the above example there is one measurement variable mt, three observations and four annotation variables in one data table. Tercen is geared to work with measurements. Visuals and computations are performed on measurements. Remembering this helps in understanding Tercen. In Tercen measurements are usually placed on the y-axis of most projection views (defined by the cross-tab window) and the others are used to define the row, col, x-axis etc. Statistician traditionally use column headers to describe a variable and rows to describe an observation. The Tercen data model allows the measurement, variable and observation to be positioned anywhere in the visuals (col, row, x-axis, y-axis, color, label) and therefore there is great flexibility. However most Tercen operators require to know what is the variable in order to compute the appropriate results. Therefore we have adopted the convention of using variable on the row. This is inspired by the genomics world where the gene (i.e. a variable) is a row and the samples are the observation. Most Tercen operators or apps use the row as a variable and columns as observations and the y-axis for the measurement. The documentation associated with the operator indicates what the operator is expecting in terms of position and input. Note, there are Tercen operators which do not follow these conventions. What is a step, app and workflow? Typically, researchers perform many computations on their measurements. Tercen supports this by having the concepts of step, apps and workflows. An individual step is a projection and potentially a computation of the data. Projections are defined visually using the cross-tab window associated with a step. A workflow app is composed of several steps. A workflow is composed of several apps and steps. What is visual computation? It allows researchers to define a visual projection of the data, this projection also defines the computation to be executed. This done by interacting with the Tercen cross-tab window. For those readers who are interested, these projections are in fact using a universal table and relational algebra (see below). What is an universal table and relational algebra? A researcher avoids complexity by using the Tercens universal table concept. A universal table is essentially an abstract table. It presents itself as one table even though underneath it is composed of several actual tables. The universal table allows Tercen to always represent a unified data model throughout the Tercen workflow and visual projections. The underlying tables are all linked using relational algebra. The researchers can make these sophisticated relationships without requiring to understand relational algebra. "],["visualization.html", "Chapter 4 Visualization Cross-tab window Layers Filters Multi-pairwise Examples Data Navigation", " Chapter 4 Visualization Researchers want to control the data they generate. Hence visualization of the data is key. Researcher want the overview and they search for known (e.g. effects) or unknown patterns (e.g. biases) in the data. The current classical tools (e.g. GraphPad, excel) are not made to visualize large complex data sets. Tercen cross tab window allows researchers to interact and configure complex views. Cross-tab window The cross-tab window is opened by double clicking on a data step in a workflow. The cross-tab window allows the researchers to create any visual by dragging-n-dropping factors to the appropriate section of the cross-tab window. The cross-tab windows is composed of six sections. Section Location Description factor top left shows the available factors filter top middle defines the filters for the view in graph section layer middle middle defines the layers for the view in graph section namespace middle middle defines the filters for the view in graph section run bottom middle defines the filters for the view in graph section graph top right displays the resulting view Researchers create a visual by drag-n-dropping factors from the factor section into one of seven zones : row, column, x-axis, y-axis, color, label, error bar. Zone Section Description row graph row dimension of graph column graph column dimension of graph x-axis graph x-axis dimension of graph y-axis graph y-axis dimension of graph color layer colored by the selected factor label layer labelled by the selected factor error bar layer an error bar using the selected factor The factors are both the variables and annotations of your data (e.g. column headers in your uploaded data). The factors are dragged over to the zones in order to create the visualization or desired projection. Researchers may either create their own view or use an app pre-configured views. The cross-tab window also allows the concept of layers. A layer allows the researcher to superimpose different views and build up sophisticated graphics. Layers Layers are created in the cross-tab window. Each created layer has the same row, column, x-axis definition but allows the researcher to configure a different y-axis, filter, color, label and error bar which are all found in the layer section. Filters Filters are found in the filter zone of the cross-tab window. The filter allows the researcher to remove data from the view. A filter is created, modified or deleted. To create a filter you require to drag over a factor from the factor section to the filter section. The filter is configurable by double clicking on the filter itself. A previously defined filter may also be added by click on the + button. A list of previously defined filters appear and can be selected. Multi-pairwise Researchers typically compare conditions using a scatter plots. These plot are often repeated over and over again, imagine if researcher could generate many scatter plots, for all the conditions, in one go. This is possible with the multi-pairwise view. Multi-pairwise is configured in the cross-tab window. It is created by dragging-n-dropping the same factor in the row zone and in the column zone. Note, a factor requires to be defined in the label zone. This allows the projection to know what factor separates data points in the pairwise plot. A typically configuration example is when researchers are comparing different gene measurements in different samples and wish to have a sample to sample pairwise plot. The factor (say sample_id), representing the sample, is placed in the row and column zone. The factor (say measurement) representing the values is placed in the y-axis zone. The factor (say gene_id), representing the different genes which were measured, is placed in the label zone. Examples Here are a few examples of the configuration flexibility of the views. Heatmap View configuration: column, row, color, heatmap Multi Pairwise Plot Profiles Bar Plot Single Scatter Plot Maps For more examples of visuals please look at the public Tercen projects called Data visualization gallery, or click this link Data Navigation Here are two main navigation modes to move around in the data in the cross-tab view: squashing the cross-tab view in and out scrolling the cross-tab view vertically and horizontally To perform squashing on the columns: position the mouse cursor on the columns press the Ctrl key and roll the mouse upward and downwards the view changes by squashing in the horizontal direction To perform squashing on the rows: position the mouse cursor on the rows press the Ctrl key and roll the mouse upward and downwards the view changes by squashing in the vertical direction The perform scrolling, there is a vertical and horizontal scroll bar. "],["visual-computation.html", "Chapter 5 Visual computation", " Chapter 5 Visual computation Researchers want to control the data they generate. Hence easily performing any computing on the data is key. In a previous chapter we discussed the cross tab window. Its flexibility and interactability are important features to create any visualization the researcher desires. The cross tab window is also capable of computing, in what we call WYSIWYC, W hat You See Is What You Compute. Every view is potentially a computation. You require to select an operator to compute on the chosen projection. Note: Some operators require a specific projection e.g. a PCA requires to have observations on the columns and variables on the rows. The list of operators grows all the time. For the current list of the operators please go to the operator list "],["workflow-and-steps.html", "Chapter 6 Workflow and Steps", " Chapter 6 Workflow and Steps Researchers want to control the data processing steps involved in the analysis of large complex data. A record of what analysis is performed is key for reproducible science. Hence Tercen has a graphical workflow editor. This allows researchers to use pre-defined workflows (e.g. taken from the app library) or if the researcher wishes, can create workflows from scratch. A workflow consists of a series of steps. Each step is explained below. Table step Allows a researcher to select a dataset. The dataset requires to be uploaded to Tercen before it is visible for selection in the Table step. Data step Allows a researcher to create a projection for visualization and computation. For a list of computations see the operator catalog. Gather step Allows a researcher to gather many factors into one factor. Join left step Allows a researcher to link to external data. Join right step Allows a researcher to link to external data. Query Data step Allows a researcher to perform a project without a computation. External View Data step Allows a researcher to connect to an external web apps (i.e. shiny app). Wizard step Maps the factors in your workflow with what is in the data. Input step Used as the first step in an app workflow. Output step Used as the last step in an app workflow. App step Is a generic term for a customized step. They are usually taken from the app library. Export step Used to export the result of a data step as a table "],["external-databases.html", "Chapter 7 External databases", " Chapter 7 External databases Researchers require to add extra information into their data analysis. This is usually extra annotation or even data from an external source (i.e. database). This is effectively a join between two data sets. The data step called join left and join right are used for this. The extra data requires to be uploaded first. This is done using the standard method of uploading to Tercen. A common key or keys are required to join the two data sets. Once joined the extra annotations or data are available for any succeeding step. "],["sharing-analysis.html", "Chapter 8 Sharing analysis", " Chapter 8 Sharing analysis Researchers require to share their analysis with the team. Using a URL is one easy way to give the complete analysis to another researcher without having to attach a large file to an email. All entities in Tercen, i.e. data, steps, views, workflows, groups, projects are shared via a permanent URL. If sharing a URL is not possible for whatever reasons then a researcher exports a workflow as a zip file. This zip file is sent to the other researchers who subsequently can import the workflow into their own project in Tercen. "],["sharing-data.html", "Chapter 9 Sharing data", " Chapter 9 Sharing data Researchers require to share their data with the team Using the a URL is one easy way to give the complete analysis to another researcher without having to attach a large file to an email. All entities in Tercen, i.e. data, steps, views, workflows, groups, projects are shared via a permanent URL. If sharing a data URL is not possible for whatever reasons then a researcher downloads data from any of the data steps in the data analysis workflow (i.e. pipeline). If the data is required for a different data analysis workflow then the researcher uses an export step (see chapter 13). Projects can also be made public and therefore other researches may read and view the analysis and data. All public projects are found in the explore area explore link "],["results-reporting.html", "Chapter 10 Results reporting", " Chapter 10 Results reporting The ability to publish results for scientific journals or even group presentation is key. The current version requires to use screen-shot programs. Tercen core architecture contains a rich amount information about the data analysis workflow. For example, Tercen know the relationship of any computed data with the source data (see chapter 14), this is ideal information when creating a report on exactly what is computed and how. There is a concept of README.md file for each project. It allows you to quickly create some documentation for the project. To create a README.md file for a project, perform the following Go to the project folder Create a file using the New file button Name the file README.md Save it Voila, you have an empty README. You can edit it anytime using the edit button, the syntax for the markdown is the standard syntax. Currently, we support the following markdown syntax: # Section ## Subsection To embed a view of one of the workflows data step use the following syntax. &lt;div workflowId=&quot;4d2ce64e3312592700d1d36dabe7c404&quot; stepId=&quot;de008572-2b81-4a4e-9681-cad765c675ab&quot;&gt;&lt;/div&gt; Replace the hexadecimal numbers (e.g. 4d2ce64e3312592700d1d36dabe7c404) of the workflowId and stepId to the one which contains the data step you wish to connect with. "],["projects.html", "Chapter 11 Team Projects", " Chapter 11 Team Projects Science is performed by teams in the context of research projects. Both concepts are integrated into Tercen. Researchers are member of a team. The team creates project. The project determines what type of data and workflows the team work on for the research study. Without a project a researcher cannot upload data or create a workflow. A team is: created by a user composed of members, a set of users (i.e. researchers) a library (i.e. set) of apps (called library) A project is: created by a team a set of data (i.e. tables) a set of workflows A user (i.e. researcher) may be a member of many teams and therefore access many projects. "],["analysis.html", "Chapter 12 Data Analysis Overview of raw data Quality check (outlier samples, batch effects) Normalization (if there is a systematic effect) Transformation (usually a log function) Exploration Statistical testing Biological interpretation", " Chapter 12 Data Analysis There are many types of analysis you can perform with Tercen. To see the some example cases, please explore the collections. Go to https://tercen.com/explore/tab/collections. Each project in this page, is an example project and in each project is a workflow containing the data analyis steps. The steps usually contain a computation called an operator. For a complete list of operators see the operator catalog. Typical steps taken during an omics analysis are the following: create or join a team for the analysis create the new project inside the team upload the data to the new project create a workflow to perform the following overview of raw data quality check (outlier samples, batch effects) normalization (if there is a systematic effect) transformation (usually a log function) exploration heatmaps. PCA, tSNE, fold changes, profiles clustering statistical testing t-test, anova biological interpretation pathway analysis, enrichment analysis network analysis The parameters you adjust for are: kicking out samples (outliers) normalization or not (depends on the data) statistical test (t-test or anova) Overview of raw data Use a the following visuals to get an overview. Heatmap visuals Profile visuals Quality check (outlier samples, batch effects) There are a range of quality checks Here are some examples: Heatmap visuals Box plots visuals Normalization (if there is a systematic effect) There are a range of normalization techniques Here are some examples: vsn_operator normalizer_operator Transformation (usually a log function) There are a range of transformation techniques Here are some examples: log_operator asinh_operator Exploration There are a range of exploration techniques Here are some examples: heatmap visuals dimension reduction (PCA, tSNE, UMAP) fold changes profiles clustering Statistical testing There are a range of statistical techniques Here are some examples: ttest_operator anova_operator Biological interpretation There are a range of statistical techniques Here are some examples: fsgea_operator pathway analysis network analysis "],["export.html", "Chapter 13 Exporting Export images Export data", " Chapter 13 Exporting To export images and data from a workflow. Export images We currently recommend using fireshot (a google chrome plugin) to capture the visuals. Once installed, with one click you can capture any view generated in Tercen. Export data You require to add an export step in the workflow. The step, once added to the workflow, is executed and the export file appears in your project area. "],["data-provenance.html", "Chapter 14 Data provenance", " Chapter 14 Data provenance Reproducible science necessitates knowing how all computed values where in fact computed. This ability is at the hart of the methodology section in a publication. Data provenance allows researchers to take a computed value and trace back to the original data sources to investigate how a value was computed. This is a fundamental aspect of reproducible science. The data model of Tercen is fundamentally built on data relationships and therefore has data provenance built into it. In the final version of Tercen we aim to offer researchers the ability to interrogate any value and show the full computed trace stack for it. "],["apps.html", "Chapter 15 Apps (i.e. plug-ins) App libraries Installing apps Structure of an operator app Tercen R package Creating an operator app Creating a workflow app Creating a template app App examples App versioning", " Chapter 15 Apps (i.e. plug-ins) Lets say a researcher begins a brand new research project and requires to analyze many RNAseq measurements. The researcher opens Tercen and proceeds to browse the Tercen library for a relevant workflow and eventually discovers a workflow template called RNAseq and installs it and voilà the research can begin. This is the concept of an app. An app is a sort of plug-in, just like an iPhone app. There are currently three types of apps: template app (e.g. RNAseq), workflow app (e.g. two group comparison, PCA), and operator app (e.g. mean, PCA, t-test). Each app has an app version and is located in an app library. The three types of apps including some examples are: A template app is a type of template data analysis pipeline and it allows a researcher to start a complete standard analysis defined by the template (e.g. a RNAseq workflow, or a bioconductor workflow). The researcher would install a RNAseq workflow app from the Tercen library. A workflow app is a mini workflow and allows a researcher to perform a set of computations and/or visualizations e.g. the researcher requires to perform a PCA including some automated visuals of the results. The researcher would install a PCA step app from the Tercen library. A operator app performs a computation on the projection views in the cross-tab window (e.g. a PCA function) e.g. the researcher requires to perform a simple PCA without any automated visuals. The researcher would install a PCA operator app from the Tercen library. For a complete list of operators go to the operator catalog. Typically a there is a hierarchy of apps where a template app contains workflow app and a workflow app contains operator app. As an example, think of an RNAseq app template app in which there is a PCA workflow app and this in turn contains a PCA operator app. App libraries There is more than one app library. However the main publicly available library is called the Tercen app library. The other app libraries have different location and permission levels. Library Location Permission level Tercen app library tercen github Public Site app library tercen server Site only Team app library tercen team area Team only A site is a Tercen server installed on a machine at an installation site. A library consists of a set of apps and their versions. Tercen app library: All public Tercen operators and apps are found on the (tercen github)[https://github.com/tercen]. The contents of the public Tercen app library are found in a json file in github app library The public operators and apps are also found on the Tercen area, see (https://github.com/tercen) Installing apps A researcher installs an app by sourcing it from any of the libraries (tercen app library, site library, team library) or from a git repository. Structure of an operator app A Tercen operator is composed of three main activities: Getting the data Operating on the data Returning the results A Tercen operator requires a Tercen data step in order to work. The operator is defined in a data step and the data step contains all that is necessary for the operator, namely structure data. The structure of the data becomes clear when you explore the table data structure of a data step. Go ahead and open a data step and you will notice three vertical tabs on the left of the window. The first tab is the default view is called the cross tab view. The other two are associated with data tables. For each data step there are two tables tabs: Tables tab (i.e. the data input to the operator) Computed tables tab (i.e. the data output of the operator) Note: the Computed tables tab only appears when the data step has been computed (i.e. the data step has a green executed status) Each table contains data as a result of the definition of the cross-tab view. The Tables tab contain the following three tables: Main table Row table Col table The Main table contains the data to be used to compute in long format. Each row represents a value and the column names are a mixture of the the original table names and Tercen system column names. The Tercen system table names are there for the correct operation of Tercen and are automatically added by Tercen. They usually begin with a dot ., examples are: .ri row index of data, represented by an integer .ci col index of data, represented by an integer Using these table column names you can see the structure of Tercen and how Tercen thinks. The Computed tables only appears when the data step is computed. It contains the following the results of the computation. If you are familiar with reading code then take some time to look at the operator code on the public tercen github. It gives a good outline on how operators are structured. Look at the file called main.R file. This is the key code for performing the operator. Tercen R package There is currently an R package in the tercen repository to help in creating R operators called teRcen. If you wish to use other programming languages then it is possible by using the Tercen API directly. The tercen R package is purely a wrapper package for the Tercen API. Creating an operator app The ability to create a new Tercen operator requires basic programming skills. Here is the top-level development process to create an operator app: Download and setup tercen studio Write the operator (with tercen studio) Deploy the operator (with tercen studio) For further documentation regarding building operators. Please go the app builders guide. Creating a workflow app Make a workflow first Save the workflow Set the property of the workflow to app Download the workflow (as zip) of the step app Unzip the folder Add README.md file Add .gitignore file Choose a repsoitory name and add a suffice _template. Create a git repository for the new workflow app Upload the files to the new workflow app git repository Creating a template app Make a workflow first Save the workflow Set the property of the workflow to template Download the template (as zip) of the template app Unzip the folder Add README.md file Add .gitignore file Choose a repository name and add a suffice _app. Create a git repository for the new template git repository Upload the files to the new template git repository App examples Operator app examples: An operator app which performs computation follows either one of the following computing pattern : per row per col per row and per col (i.e. per cell) App versioning In science, it is essential to reproduce the complete analysis you may have published many years ago. Tercen manages versions very tightly. This is particular important when you consider the three app layers in Tercen. Each layer requires versioning. Tercen manages the workflow and workflow apps using the metadata associated with both those apps. For operator apps written in R, it uses the packrat package. packrat makes sure when the researchers chooses to use an operators from the app library it uses exactly the same version of R packages used by the developer who developed the operator and uploaded it in the app library. "],["app-builders-guide.html", "Chapter 16 App builders guide", " Chapter 16 App builders guide For further documentation regarding building apps. Please go the app builders guide. "],["programmatic-access.html", "Chapter 17 Programmatic access", " Chapter 17 Programmatic access Lets say researchers wish to execute the same Tercen workflow over and over again. They may even have an existing pipeline they wish to convert into a Tercen workflow. Either way they are seeking a one button execution of a workflow from the security of their desktop PC. One method to do this is to use the Tercen API. Researchers who wish to interact with Tercen programmatically through the API can do so. Any functionality available graphically in Tercen is also available programmatically. This powerful capability means researchers can do the following: automate the uploading data automate the creation of workflows automate the execution of workflows (i.e. pipelines) automate the creation of teams and users automate the creation of projects automate the creation of operators Tercen itself auto-generates the API for the different programming languages. At the moment we auto-generated a package for the R programming language. We are aiming to rapidly auto-generate for Python and Matlab very soon (during summer of 2021). if you have an immediate need, do not hesitate to contact us by email to support@tercen.com with the request. The teRcen R package on the Tercen github allows complete programmatic control. For the full API please refer to the teRcen R package. Note: Install the Tercen Studio product and its a ready to go development environment. For further documentation regarding Tercen Studio. Please go the app builders guide. "],["deployment.html", "Chapter 18 Products", " Chapter 18 Products Each product represents a different manner in which Tercen is delivered to the researchers. Currently there are three products. Each type is explained below with a brief description of some of the flavors available. The following Tercen products are: Tercen.com Tercen Enterprise Tercen Studio The Tercen.com requires no installation and can be found at http:\\\\tercen.com The Tercen Enterprise is a docker installation and runs any server or desktop, it runs on Windows, Linux and Mac (see next Chapter for hardware recommendations) . The Tercen Studio is for developers and runs as docker installation and includes the Tercen Enterprise and a free RStudio Server. It can be found on our github tercen studio repository "],["server.html", "Chapter 19 Running a server Server hardware Server resources", " Chapter 19 Running a server If you require the on-site version of Tercen (called Tercen Enterprise) then send an email to support@tercen.com. Server hardware The recommended hardware specification for a high-end server is: CPU : Xeon, 8 Cores RAM : 64 Gig HD : 1TB SSD OS : Linux Smaller servers can be used (e.g. not a Xenon CPU but i7 or i5). The number of users and the type of data analysis activity determines the size required. An important rule of thumb is to have at least 8Gigs of RAM per CPU. Hence (e.g. 4 Cores requires 32 Gigs). By default we recommend Linux but Tercen Enterprise also runs on Windows and Mac OS servers. Server resources A Tercen Enterprise server allows for multiple researchers using the same server. Each researcher is using CPU and Storage resources. A server may be easily swamped with requests and therefore a system of resource management is in place. There are different categories (i.e. CPU, Data, Storage, API calls) of resources and different levels of utilization (i.e. 0,1,2) where 0 represents the lowest level of resource utilization. Ideally the right level of resources should be assigned for different users. A researcher who exceeds their limit gets an error. A resource utilization information bar is shown to each user in the graphical user interface. The bar indicates the level of resource utilization and the amount left. Server resources are configured using config.yaml file. Go to the folder named resources\\tercen in the Tercen installation folder (usually C:\\Tercen), in it there is a file called config.yaml. The file contains three profile levels: 0,1,2 Each user is associated with one of the levels. The default is 0 (the lowest level of resource allocation). Level Resource 0 Low amount of resources 1 Medium amount of resources 2 Highest amount of resources There are settings associated for each level for each category of resources. The current categories are: Category Description Name in yaml file Table resource for table (i.e. size) TableProfile CPU time resources for CPU time CputimeProfile Storage resources for storage StorageProfile Run resources for a run RunProfile API calls resources fro the API ApiCallProfile Increasing the value for any of these settings gives extra resources. If you change these profile settings then you need to restart the Tercen application for your changes to take effect. "],["getting-started.html", "Chapter 20 Getting started", " Chapter 20 Getting started Here are some ideas: Try the starters guide Look at the Tercen youtube channel There are also some extra online material found in the learn section of our website. For app developers read the online app builders guide Contact us for an online one-2-one session Give feedback on this book by creating an issue Give feedback on Tercen by sending an email to info@tercen.com Try the Tercen API by using the teRcen R package. "],["known-issues.html", "Chapter 21 Known issues", " Chapter 21 Known issues It is not possible to browse the operators by categories. Please browse the operators by going to the operator catalog. For large datasets (i.e. more than 30 million data points) the sorting of text is not optimum. "],["roadmap.html", "Chapter 22 Roadmap", " Chapter 22 Roadmap The initial tercen.com was launched in the year 2020. The following improvements are planned during year 2021. Better documentation, guides and videos (2021) Adding more operators (2021) improvements in the wizard apps support (2021) Performance improvements (2021) Python support (2021) "],["glossary.html", "Chapter 23 Glossary", " Chapter 23 Glossary A: Activities Log The section of a Tercen project where actions are taken in the project is recorded. Links to the object where the change happened are included. App: A plug-in to Tercen. It can be one of three types: operator, app, template. App library: A repository of Tercen apps. There are many repository locations, (e.g. GitHub, team library). B: Breadcrumb: A dynamic URL link-line at the top of the Tercen interface. The Breadcrumb displays a path to the users current location in the system. It is built up of individual links to each step on the path. Users can navigate to any part of the path by clicking the step link. C: Clone: Takes a copy of the element selected and saves it into an equivalent location selected by the user. The user can modify the clone without disturbing the original research. Full projects can be cloned as can parts of projects such as Workflow. Color box: Part of the cross tab projection screen. When a factor is dropped on this box Tercen will assign a color to the value of that factor in the projection grid. Colors grade from warm (red) through to cold (blue) from highest plus number to lowest minus number. A rainbow palette is a default but other pallets can be selected for different effects. Cross-tab window: A Tercen interface window to define a projection view (i.e. what is on the row, col, y-axis, x-axis, color, label). D: Data Set: A collection of measurements uploaded to Tercen or created by Tercen after manipulation in a workflow. Usually, Datasets take the form of a data table but can be linked to other sources such as databases. Data Step: The basic Calculation or Projection unit of a Tercen workflow. All the heavy lifting of Data Analysis in Tercen is done here. Data steps contain a layout of Factors into a projection grid and settings to create a visualization from this. Operators can be applied to Data Steps so their calculations are passed down to data steps linked below it. Docker: A platform that allows software applications to be packaged into a container. Containers run on Dockers virtual environment within a computer. The container holds the dependencies that the app needs to run so this way it can operate independently of the operating system on the computer which might conflict with it. E: Enterprise: A version of Tercen that can run on a local server and be available through an organizations network. Organizations with strict access control requirements, restrictions on internet access, or regulatory commitments to local data storage should choose this option. Explore: The community section of Tercen. Public projects are made available to everybody here. F: Factor: The Tercen name for the smallest group of data you can work with. If a table has 10 columns then there will be 10 factors to make projections with. If a spreadsheet has names and addresses then [FirstName] [Surname] {Street} and {City} will all be factors. Operators can also create new factors when they run. These are the calculated values and they are available for the next data steps in the workflow. Filter: A method of subdividing data in Tercen. Simple filters might exclude data zero values from a graph. Filters are made on the Cross-Tab Projection screen. There are two ways to apply a filter. Drag a factor to the filters section and set a rule for how its data is included or excluded. Or Highlight rows in the projection and right-click to set the rules. Multiple filters can be applied to the same data set at the same time. Filter box: The part of the cross-tab projection screen where filter settings can be created, modified or deleted. Factors can be dragged here to create a filter. G: GitHub: GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. Tercen connects to GitHub and we store all of our operators there for anyone to access Git Repository: A folder or room where any type of file can be stored. GitHub will track changes to the files, even if multiple people are changing them at the same time. It allows rollbacks to any previous version and makes the files available to be downloaded according to your privacy settings. H: Home: Your personal page. It works like a Team but with only one member You. Your personal Projects are hosted here as well as access to administration areas such as your Tercen subscription or settings. I: J: K: L: Layer: Created in the cross-tab window. Each layer has the same row, column, x-axis definition but allows the user to configure a different y-axis, filter, color, label, and error bar. This allows multiple graphical projections of the same data layout without having to create multiple data steps. Library: A collection of Operators or Apps which have been made available to be used on a Project. Libraries can be used to control what calculations are available to a project team. Operators and Apps must be added to a Library by a Team member with the right permissions level. Long format: A table format where every row has a single measurement. It is a list format that makes data more easily processed by computer code working from top to bottom rather than a human preferred left to right. M: Measurement: A numerical variable representing a single point of data. Multi-pairwise: A data projection in the crosstab grid lays out multiple scatter-plots in a matrix. It is created by dragging and dropping the same factor into both the row zone and the column zone. A factor must also be defined in the label zone. This allows the projection to know what factor separates data points in the pairwise plot. N: O: Observation: A gathering of data at a particular moment in time. Observations can consist of one or more measurement variables. Operator: Is an algorithm that computes data supplied to it by the input projection view defined using the cross-tab window. Tercen operators pass their calculations downstream to linked Data Steps. P: Project: A folder containing all the elements of data analysis. Data files, workflows, and supporting documents are held here. Tercen provides an activity tracker on each Project to show a history of actions. Creating a README.md adds a web page to the project where research, data, and graphs can be displayed. Projection: A projection is defined using the cross-tab window. It is a representation of the data factors laid out by dragging and dropping. Usually, it is in the form of a graph. Q: R: Run: Appears in Tercen as a button or select from a drop-down list. Choosing this will cause the algorithms in an Operator to start their calculations. To help you remember to run your calculations Tercen puts a little green light on a Data Step when they are successful or a red light when there is a problem. S: Step: An event on a Tercen workflow. Events include Data Table Import, Visual Projection, Calculations, Joins, and Exports. A single step allows for a visual projection and optionally a computation using an operator. Subscription: The fee you pay to access Tercens advanced features. Normally charged monthly to a credit card. T: Tag: A label is given to a piece of data. Normally issued on an ad-hoc basis but computer systems can track them and perform functions based on them. Table: A basic collection of data. Very like a spreadsheet, and indeed many data tables start out as spreadsheets. It normally has titles for the data in the first row and lists of individual data underneath those titles in the columns. Team: A group of users on Tercen who are collaborating on one or more projects. Users can have different permissions to access and modify the elements of a project: Admin, Read Write, or Read Only. Tercen: The next-generation data analytics platform. Its drag and drops, and it lives in the cloud, so no coding is required. There are also a powerful community and sharing functions that you wont find anywhere else. Tercen GitHub: You can find everything Tercen here in our Tercen Repository. Sample data files, instruction manuals, and guides, and Mathematical operators for your analysis. Tercen Studio: The development environment for Tercen integrates coding and testing features. Integrates RStudio to Tercen through your browser. U: Universal Table: An abstract internal table built by Tercen from all data sources uploaded to it. This unified data model allows Tercen to perform calculations on data throughout the workflow or visual projections regardless of the original source. Username: Your unique personal identifier on Tercen. We even generate a unique icon from it so everybody can see who you are. V: Variable: A variable is a characteristic of a unit being observed that may assume more than one of a set of values to which a numerical measure or a category from a classification can be assigned (e.g. income, age, weight, etc., and occupation, industry, disease, etc. Visual computation: Users of Tercen define a computation visually for example by dragging and dropping elements, setting filters and lines, or adding operators. The Tercen engine performs the calculations on the fly as visual adjustments are made. W: Wide-format: A format where every column is a variable. Considered the traditional layout for a spreadsheet with titles along the top and individuals down the side. This layout is optimized for human reading. For machine reading layouts see Long format. Workflow: A sequence of steps or apps to achieve an analysis pipeline. Calculations made in a data step are passed downwards to steps which are linked below. Multiple branches of analysis can be created. Workflow app: A small workflow composed of steps, visuals, and operators. Typically it achieves one task, e.g. PCA app. The PCA app is composed of one result visual and one computation and one data wrangling step. X: Y: Z: Zone: Part of the cross-tab projection screen. They are loaded with Factors dragged and dropped from the data and are used to form the layout of a projection. There are four zone types that run from inside to outside on the X and Y-Axis. x-axis zone: The bottom-most division of the Data runs across the top of the cross-tab projection grid. Its primary function is to divide data. There can be only one X-axis zone. y-axis zone: The right-most division of the Data that runs down the side of the cross-tab projection grid. Its primary function is to divide data. There can be only one Y-axis zone. This zone is often the most important one in a projection. It should be loaded first. row zone: Zones running down the side of the grid parallel to the Y-Axis. Their primary function is to sort the information in the Y-Axis. There can be multiple Row zone factors but their order is important as Tercen applies to sort from the outside-in. column zone: Zones running along the top of the grid parallel to the X-Axis. Their primary function is to sort the information in the X-Axis. There can be multiple Column zone factors but their order is important as Tercen applies to sort from the outside-in. Label box: Part of the cross tab projection screen. "]]
