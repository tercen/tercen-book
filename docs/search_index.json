[
["index.html", "Tercen Book Preface Why read this book? Structure of the book Acknowledgement Typography conventions Feedback", " Tercen Book Faris Naji, Alexandre Maurel Preface This is a book about the Tercen platform and covers the motivation, design ideas, features, deployment, server administration aspects and roadmap. It is currently a draft and aims to eventually be the definitive guide to Tercen. It is incrementally written and changes often as we are constantly adding to the Tercen project. Why read this book? It is the centralized knowledge of Tercen in a book format. It is intended to be detailed and is aimed for researchers who require an understanding of Tercen. If you require a quick intro to Tercen then we suggest the starters guide. Structure of the book The book has a chapter for each of the tool’s main features. The final chapters contain additional practical information (e.g. server configuration, roadmaps). Acknowledgement We would like to thank all the users for their feedback about Tercen. It has helped us improve Tercen. Typography conventions Important terms and concepts are in bold (e.g. workflow, step, biologist). Any element related to a user interface element is in a code typography (e.g. factor label, ok button). Feedback If you wish to give feedback then please do not hesitate to create an entry in the issue tracker. The book is in a public github repository tercen book, therefore feel free to interact with the repository by cloning, modifying, pushing content. "],
["about-the-authors.html", "About the authors", " About the authors Faris Naji has over ten years experience in trying to remove data barriers in science. Lives in Amsterdam and thinks bikes are the solution to urban living (at least in Europe). Alexandre Maurel has over ten years experience in building high data performance tools. Lives in the south of France and is always on the lookout for a good restaurant. "],
["introduction.html", "Chapter 1 Introduction Motivation Challenges Way forward", " Chapter 1 Introduction Motivation Tercen promotes collaboration for data analysis. Not everyone can code or even wants to, but everyone should benefit from the explosion of data and code currently taking place. Tercen allows non programmers (e.g. biologists) to explore their data and allows programmers (e.g. bioinformaticians) to upload their code (or web-apps) for the biologist to use. By offering this services we believe biologist get empowered and can claim back control of their data. The bioinformatician gets liberated from the operational details and day to day analysis demands from the biologist. This is summed up with the phrase: Tercen empowers the biologist and liberates the bioinformatician. Challenges There are challenges for both the biologist and bioinformatician. Biologist’s challenges: Get control of data Handle large data sizes Reduce analysis time Integrate external databases Visual Interaction Bioinformatician’s challenges: Validate methodologies Improve analysis quality Educate biologists on statistical techniques Reduce time spent on IT support Way forward A new generation of tools and approaches are necessary. TercenCloud aims to be such an approach. TercenCloud is a platform where biologist and bioinformatician work easily together and upload, store and compute data. A more harmonious state between the programmers and non-programmers is achieved using TercenCloud. The main features of TercenCloud are: Generate any visual Visual computation Workflow analysis and customization Integrate external knowledge Sharing analysis Sharing data Results reporting Project centric analysis Data provenance Add operators or apps (i.e. plug-ins) Programmatic access (Tercen API) Cloud hosted or on-site Zero install For a deeper understanding about TercenCloud read the next chapter and consult the specific chapter on a particular feature. "],
["tercen-features.html", "Chapter 2 Tercen features", " Chapter 2 Tercen features Here is an overview of Tercen features. Each feature has its own chapter. Generate any visual A researcher configures any graphical view (e.g. heatmaps, plots, time series, kinetic time series and parallel co-ordinates, pairwise scatter plots). Refer to chapter 4. Visual computation A researcher defines a computation (e.g. mean, ANOVA, Mixed-Model, count) visually and in so doing defines a new computation. Process any large numeric data: Researcher can upload and process any type of large numerical data (e.g. genomic, flow cytometry, proteomic). Refer to chapter 5. Workflow analysis and customization A researcher visually customizes a workflow. A workflow is a pipeline data analysis composed of a sequence of computation and annotation steps. There are standard workflows for each of molecular readouts (e.g. RNAseq, flowCyto, mass-spectroscopy spectra). Refer to chapter 6. Integrate external knowledge A researcher integrates extra data from external data or knowledge sources (e.g. biological database). Refer to chapter 7. Sharing analysis A researcher shares the workflow and data via an URL and both researcher and bioinformatician can collaborate on the same workflow and data at the same time. Refer to chapter 8. Sharing data A researcher shares the measurement and computed data via URL to other parties. Raw measurement data or newly analysed data is shareable to any users with internet. Refer to chapter 9. Results reporting A researcher generates an extensive report on the complete workflow for collaborators, presentations or publication. The report contains not only the conclusions but an automatically generated formal description of the complete process (e.g. normalization, statistics testing, clustering, functional annotation). This is essential for reproducible science. Refer to chapter 10. Project centric analysis Science is project orientated and a researcher centralizes all the data, workflow and visuals in one project and easily sets access control. Refer to chapter 11. Data provenance A researcher traces any computed value back to the initial measurement. Refer to chapter 12. Add operators or apps (i.e. plug-ins) A researcher easily adds powerful computation or visualization plug-ins. These plugins are developed by the bioinformatician and transmitted via the TercenCloud platform. Plug-ins are computation or visualization modules (e.g. vsn normalization, ANOVA, PCA, MDS, Mixed Models, and clustering). Refer to chapter 13. Programmatic access Bioinformaticians accesses and manipulates the analysis and components through their favorite programming environment (e.g. R, RShiny, Python, Matlab and Javascript). Refer to chapter 14. Cloud hosted or on-site A researcher shares the complete process via a secure internet connection to secure cloud service, all computation resources (CPU, RAM and hard disk) are dynamically allocated to the researcher. Tercen is also available for onsite deployment. Refer to chapter 15 and chapter 16. Zero install A researcher immediately starts performing analysis using a browser on any device without the aid of an IT administration. Refer to chapter 15. "],
["concepts.html", "Chapter 3 Concepts", " Chapter 3 Concepts The important concepts of Tercen are covered in this chapter. The concepts help in the understanding the logic behind Tercen. It allows users to visual interact and define a projection for visualization and computation. For those readers who are interested, these projection are in fact using relational algebra. Even though the data used for the projection may be from different tables, the user sees only one table (called the universal table). "],
["visualization.html", "Chapter 4 Visualization 4.1 Cross-tab window 4.2 Layers 4.3 Filters 4.4 Multi-pairwise 4.5 Examples", " Chapter 4 Visualization Researchers want to control the data they generate. Hence visualization of the data is key. Researcher want the overview and they search for known (e.g. effects) or unknown patterns (e.g. biases) in the data. The current classical tools (e.g. graphpad, excel) are not made to visualize large complex data sets. Tercen cross tab window allows researchers to interact and configure complex views. 4.1 Cross-tab window The cross-tab window is opened by double clicking on a data step in a workflow. The cross-tab window allows the researchers to create any visual by dragging-n-dropping factors to the appropiate section of the cross-tab window. The cross-tab windows is composed of six sections. Section Location Description factor top left shows the available factors filter top middle defines the filters for the view in graph section layer middle middle defines the layers for the view in graph section namespace middle middle defines the filters for the view in graph section run bottom middle defines the filters for the view in graph section graph top right displays the resulting view Researchers create a visual by drag-n-dropping factors from the factor section into one of seven zones : row, column, x-axis, y-axis, color, label, error bar. Zone Section Description row graph row dimension of graph column graph column dimension of graph x-axis graph x-axis dimension of graph y-axis graph y-axis dimension of graph color layer colored by the selected factor label layer labelled by the selected factor error bar layer an error bar using the selected factor The factors are both the variables and annotations of your data (e.g. column headers in your uploaded data). The factors are dragged over to the zones in order to create the visualization or desired projection. Researchers may either create their own view or use an app pre-configured views. The cross-tab window also allows the concept of layers. A layer allows the researcher to superimpose different views and build up sophisticated graphics. 4.2 Layers Layers are created in the cross-tab window. Each created layer has the same row, column, x-axis definition but allows the researcher to configure a different y-axis, filter, color, label and error bar which are all found in the layer section. 4.3 Filters Filters are found in the filter zone of the cross-tab window. The filter allows the researcher to remove data from the view. A filter is created, modified or deleted. To create a filter you require to drag over a factor from the factor section to the filter section. The filter is configurable by double clicking on the filter itself. A previously defined filter may also be added by click on the + button. A list of previously defined filters appear and can be selected. 4.4 Multi-pairwise Researchers typically compare conditions using a scatter plots. These plot are often repeated over and over again, imagine if researcher could generate many scatter plots, for all the conditions, in one go. This is possible with the multi-pairwise view. Multi-pairwise is configured in the cross-tab window. It is created by dragging-n-dropping the same factor in the row zone and in the column zone. Note, a factor requires to be defined in the label zone. This allows the projection to know what factor separates data points in the pairwise plot. A typically configuration example is when researchers are comparing different gene measurements in different samples and wish to have a sample to sample pairwise plot. The factor (say sample_id), representing the sample, is placed in the row and column zone. The factor (say measurement) representing the values is placed in the y-axis zone. The factor (say gene_id), representing the different genes which were measured, is placed in the label zone. 4.5 Examples Here are a few examples of the configuration flexibility of the views. Heatmap View configuration: column, row, color, heatmap Multi Pairwise Plot Profiles Bar Plot Single Scatter Plot Maps "],
["visual-computation.html", "Chapter 5 Visual computation", " Chapter 5 Visual computation Researchers want to control the data they generate. Hence easily performing any computing on the data is key. In a previous chapter we discussed the cross tab window. Its flexibility and interactability are important features to create any visualization the researcher desires. The cross tab window is also capable of computing, in what we call WYSIWYC, W hat You See Is What You Compute. Every view is potentially a computation. You require to select an operator to compute on the choosen projection. Note: Some operators requrie a specific projection e.g. a PCA requires to have observations on the columns and variables on the rows. "],
["workflow-and-steps.html", "Chapter 6 Workflow and Steps", " Chapter 6 Workflow and Steps Researchers want to control the data processing steps involved in the analyis of large complex data. A record of what analysis is performed is key for reproducible science. Hence Tercen has a graphical workflow editor. This allows researchers to use pre-defined workflows (e.g. taken from the app library) or if the researcher wishes, can create workflows from scratch. A workflow consists of a series of steps. Each step is explained below. Table step Allows a researcher to select a dataset. The dataset requires to be uploaded to Tercen before it is visible for selection in the Table step. Data step Allows a researcher to create a projection for visualization and computation. Gather step Allows a researcher to gather many factors into one factor. Join left step Allows a researcher to link to external data. Join right step Allows a researcher to link to external data. Query Data step Allows a researcher to perform a project without a computation. External View Data step Allows a researcher to connect to an external web apps (i.e. shiny app). Wizard step Maps the factors in your workflow with what is in the data. Input step Used as the first step in an app workflow. Output step Used as the last step in an app workflow. App step Is a generic term for a customized step. They are usually taken from the app library. "],
["external-databases.html", "Chapter 7 External databases", " Chapter 7 External databases Researchers require to add extra information into their data analysis. This is usually extra annotation or even data from an external source (i.e. database). This is effectively a join between two data sets. The data step called join left and join right are used for this. The extra data requires to be uploaded first. This is done using the standard method of uploading to Tercen.å A common key or keys are required to join the two data sets. Once joined the extra annotations or data are available for any succeeding step. "],
["sharing-analysis.html", "Chapter 8 Sharing analysis", " Chapter 8 Sharing analysis All entities in Tercen, i.e. data, steps, views, workflows, groups, projects are shared via a permanent URL. If sharing a URL is not possible for whatever reasons then a researcher exports a workflow as zip file. This zip file is sent to the other researchers which imports the workflows. "],
["sharing-data.html", "Chapter 9 Sharing data", " Chapter 9 Sharing data All entities in Tercen, i.e. data, steps, views, workflows, groups, projects are shared via a permanent URL. If sharing a data URL is not possible for whatever reasons then a researcher downloads data from any of the steps in the workflow. "],
["results-reporting.html", "Chapter 10 Results reporting", " Chapter 10 Results reporting The ability to publish results for scientific journals or even group presentation is key. The current version of beta is implementing a high quality image output. Any data step allows the researcher to export a high quality visual for reports. The final release of Tercen is targeted to have a full reporting subsystem in order to convert workflows into reports. "],
["projects.html", "Chapter 11 Team Projects", " Chapter 11 Team Projects Science is performed by teams in the context of research projects. Both concepts are integrated into Tercen. Reseachers are member of a team. The team creates project. The project determines what type of data and workflows the team work on for the research study. Without a project a researcher cannot upload data or create a workflow. A team is: created by an admin a set of users (i.e. researchers) a set of apps (called my library) A project is: created by a team a set of data (i.e. tables) a set of workflows A user (i.e. reasearcher) may be a member of many teams and therefore access many projects. "],
["data-provenance.html", "Chapter 12 Data provenance", " Chapter 12 Data provenance Data provenance allows researchers to take a computed value and trace back to the original data sources to investigate how a value was computed. This is a fundamental aspect of reproducible science. The data model of Tercen is fundamentally built on data relationships and therefore has data provenance built into it. In the final version of Tercen we aim to offer researchers the ability to interrogate any value and show the full computed trace stack for it. "],
["apps.html", "Chapter 13 Apps (i.e. plug-ins) App libraries Installing apps Structure of an operator app Tercen R package Creating an operator app Creating a step app Creating a workflow app App examples", " Chapter 13 Apps (i.e. plug-ins) Lets say a researcher begins a brand new research project and requires to analyze many RNAseq measurements. The researcher opens Tercen and proceeds to browse the Tercen library for a relevant workflow and eventually discovers a workflow app called “RNAseq” and installs it and voilà the research can begin. This is the concept of an app. An app is a sort of plug-in, just like i-phone apps. There are currently three types of apps: workflows (e.g. RNAseq), workflow apps (e.g. two group comparison, PCA), and operators (e.g. mean, PCA, t-test). Each app has an app version and is located in an app library. The three types of apps including some examples are: An app workflow is a type of template data analysis pipeline and it allows a researcher to start a complete standard analysis defined by the template (e.g. a RNAseq workflow, or a bioconductor workflow). The researcher would install a RNAseq workflow app from the Tercen library. An app workflow app is a mini workflow and allows a researcher to perform a set of computations and/or visualizations e.g. the researcher requires to perform a PCA including some automated visuals of the results. The researcher would install a PCA step app from the Tercen library. An app operator performs a computation on the projection views in the cross-tab window (e.g. a PCA function) e.g. the researcher requires to perform a simple PCA without any automated visuals. The researcher would install a PCA operator app from the Tercen library. Typically a there is a hierarchy of apps where a workflow contains workflow apps and a workflow app contains operators. A an example, think of an RNAseq app workflow in which there is a PCA workflow app and this in turn contains a PCA app operator. App libraries There is more than one app library. However the main publicly available library is called the Tercen app library. The other app libraries have different location and permission levels. Library Location Permission level Tercen app library tercen github Public Site app library tercen server Site only My app library tercen team area Team only A site is a Tercen server installed on a machine at an installation site. A library consists of a set of apps and their versions. Tercen app library: All public Tercen operators and apps are on a tercen github. The contents of the public Tercen app library are found in a json file in github app library The public operators and apps are also found on the Tercen area, see (https://github.com/tercen) Installing apps A researcher installs an app by sourcing it from any of the libraries (tercen app library, site library, my library) or from a git repository. Structure of an operator app A Tercen operator is composed of three main activities: Getting the data Operating on the data Returning the results The data is contained in each data step. Each data step contain the data in three main tables: Row table Column table Cross-tab table Each table contains different data as a result of the definition of the cross-tab projection. The cross-tab table contains the following important columns, as examples: .ri row index of data, represented by an integer .ci col index of data, represented by an integer Tercen R package There is currently an R package in the tercen repository to help in creating operators called teRcen Creating an operator app Tercen allows programmers to easily build new operators from the comfort of their favorite interactive development environment (IDE). From the IDE it is possible to access all Tercen features. Access the input data and returning results is essential when developing your operator app in the IDE on your local machine. The ability to create a new Tercen operator requires basic programming skills and is straight forward. Here is a development process to create an operator app: Getting setup: Install R Install R Studio Install the teRcen R package Open R Studio and create an empty project and init the git Copy four files into project, you can find them in any operator in tercen github. operator.json main.R README.md .gitignore Modify appropriately each of the files Create the workspace.R file by: Copy main.R and rename to workspace.R file Add the following lines to workspace.R file: source(&#39;~/.Rprofile&#39;) options(&quot;tercen.workflowId&quot;= &quot;76a4dcffd551802fd23d42bd862e8300&quot;) options(&quot;tercen.stepId&quot;= &quot;3-2&quot;) The values indicated above are examples. The real values come from the next section. Writing and testing the operator app: Develop and test the operator app within the workspace.R file Determine the input data for the operator app Start Tercen Use the browser to go to http://127.0.0.1:5400 Login Go to the workflow which contains the data Add a data step Configure a project view in cross-tab window of the data step Record the stepId and workflowId of this data step Get data using the tercen api tercen::ctx$select Execute the operator app locally Push results back to Tercen using the tercen API tercen::ctx$save The actions above may happen multiple times as you develop your operator. Once the operator app is finalized then proceed: Deploy the operator: Modify workshop.R and copy it to main.R Run packrat::init This can always re-init packrat by performing the following Remove the packrat folder in the Rstudio project folder Remove the .Rprofile file in the project folder Run packrat::init again upload to github in a public repository, let call it the operator git repo. You can now install your operator into your Tercen server via the github install menu from the site library or any project library If you want it available to the Tercen community send an email to Tercen. Tercen administrator makes it available by modify app library on tercen github. Content of .Rprofile: file in your home directory options(&quot;tercen.serviceUri&quot;=&quot;http://127.0.0.1:5400/api/v1/&quot;) options(&quot;tercen.username&quot;=&quot;XXXX&quot;) options(&quot;tercen.password&quot;=&quot;YYYY&quot;) where XXXX and YYYY are the appropriate username and password of the developer. Creating a step app Make a workflow first Save the workflow Set the property of the workflow to “step” Download the zip of the step app Unzip the folder Add README.md file Add .gitignore file Create a git repository for the new step app Upload the files to the new step app git repository Creating a workflow app Make a workflow first Save the workflow Set the property of the workflow to “workflow” Download the zip of the workflow app Unzip the folder Add README.md file Add .gitignore file Create a git repository for the new workflow app git repository Upload the files to the new workflow app git repository App examples Operator app examples: An operator app which performs computation follows either one of the following computing pattern : per cell per row per col per row and col "],
["programmatic-access.html", "Chapter 14 Programmatic access", " Chapter 14 Programmatic access The teRcen R package on the tercen github allows complete programmatic control. Any functionality available graphically in Tercen is also available pro grammatically. This includes, for example: uploading data computing data creating groups and users creating projects creating workflows and operators For the full API please refer to the teRcen R package "],
["deployment.html", "Chapter 15 Deployment 15.1 Cloud 15.2 On-site", " Chapter 15 Deployment Deployment is the manner in which Tercen is delivered to the researchers. Currently is available in two major deliveries: cloud and on-site. Each type is expained below with a brief description of some of the flavours available. 15.1 Cloud When Tercen is running on servers in a remote data center, we consider this to a cloud deployment. There is a cloud deployment called TercenCloud. It is aimed for the public and is currently free. A private TercenCloud is also available but requires a request. Public Cloud The TercenCloud is found at: (http://www.tercen.com). Currently the cloud is running the alpha version of Tercen. It will be shortly upgraded. Private Private Cloud The tercen cloud private is tercen running on private servers on the cloud. These servers may be Amazon web services, for example. It is available on request to info@tercen.com 15.2 On-site The tercen on-site requires an install and is available by sending an email to info@tercen.com. Currently the on-site version are the beta version of tercen. Desktop on-site The desktop version is for a local on-site install on a user’s machine. This version is still capable of being a server to a group of users. Server on-site The server version is for a on-site server install. Cluster on-site The cluster version is for a high availability on-site server install. "],
["server.html", "Chapter 16 Running a server Server resources", " Chapter 16 Running a server If you require the on-site version of Tercen then send an email to info@tercen.com. Currently the on-site versions is the beta of Tercen. Server resources A Tercen server allows for multiple researchers using the same server. Each researcher is using CPU and Storage resources. A server may be easily swamped with requests and therefore a system of resource management is in place. There are different categories (i.e. CPU, Data, Storage, API calls) of resources and different levels of utilization (i.e. 0,1,2) where 0 represents the lowest level of resource utilization. Ideally the right level of resources should be assigned for different users. A researcher who exceeds their limit gets an error. A resource utilization information bar is shown to each user in the graphical user interface. The bar indicates the level of resource utilization and the amount left. Server resources are configured using config.yaml file. Go to the folder named resources\\tercen in the Tercen installation folder (usually C:\\Tercen), in it there is a file called config.yaml. The file contains three profile levels: 0,1,2 Each user is associated with one of the levels. The default is 0 (the lowest level of resource allocation). Level Resource 0 Low amount of resources 1 Medium amount of resources 2 Highest amount of resources There are settings associated for each level for each category of resources. The current categories are: Category Description Name in yaml file Table resource for table (i.e. size) TableProfile CPU time resources for cpu time CputimeProfile Storage resources for storage StorageProfile Run resources for a run RunProfile API calls resources fro the API ApiCallProfile Increasing the value for any of these settings gives extra resources. If you change these profile settings then you need to restart the Tercen application for your changes to take effect. "],
["getting-started.html", "Chapter 17 Getting started", " Chapter 17 Getting started Here are some ideas: Try the starters guide Try to code for different operators using the teRcen R package, Note when using R Studio, it has a useful auto-complete feature. When you have loaded the teRcen R package, the available methods for tercen client and tercen query object will automatically appear as you type. Give feedback on this book by creating an issue Give feedback on Tercen by sending an email to info@tercen.com Contact us for an online one-2-one session "],
["known-issues.html", "Chapter 18 Known issues", " Chapter 18 Known issues Alpha known issues: By default users are not allowed to create operators unless explicitly given permission by a Tercen administrator Cannot perform an operator on multi pairwise projections If your local computer’s date and clock time is not the same as the Tercen server then you may get delays and errors Cannot run python scripts Beta known issues: The beta version of Tercen is currently being tested. "],
["roadmap.html", "Chapter 19 Roadmap", " Chapter 19 Roadmap Tercen is complex software and requires to built up in stages with constant feedback. The alpha version allows for testing the value proposition and the feature list. The beta and final are about up-scaling. alpha Released on: start of 2016 beta Released on: start of 2017 New server application, called Tercen_Server(beta) Easy one button installation New app store (on github) Ability to import/export workflows New admin menu Improved user management New resource management (for CPU and Disk) Upgraded user interface New GUI, and browser New data table views New progress bars New logs Improved performance Github integration (for R code) New R code package management New full programmatic access to Tercen New Tercen R package, called teRcen final Scheduled for mid 2018 "],
["glossary.html", "Chapter 20 Glossary", " Chapter 20 Glossary Measurement: A numerical variable Observation: An observation is the factor name given to a value (measurement), at a particular period, of a particular variable. Variable: A variable is a characteristic of a unit being observed that may assume more than one of a set of values to which a numerical measure or a category from a classification can be assigned (e.g. income, age, weight, etc., and “occupation”, “industry”, “disease”, etc. Cross-tab: Projection: Long format: Wide format: App: Workflow: "]
]
